<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>stat_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//MAKE SURE THAT THIS IS THE ONLY OSCALECONTROL OBJECT!!!

//Move on to the real starting room
if(room == buffer_op_room){
    room_goto(Title_Screen);
    new_game = true;
}
else{
    new_game = false;
}

//Whether or not the Store has been checked yet
store_checked = false;


//Disable the Application Surface
application_surface_draw_enable(false);
surface_resize(application_surface,view_wview,view_hview)


clickable = 0;
pressed = 0;
adding = false;

///set initial scale
scale=2;
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}

///New Smart-Interpolation Feature
global.interpolation=false

if(os_type != os_ios and os_type != os_android){
    custom_fullscreen = 0;
}
else{
    custom_fullscreen = 1;
}
custom_fullscreen = 1;

menu_mode = "menu";
//Create custom global variables here
globalvar player_class;
globalvar enemy_database;
globalvar ending_database;
globalvar tutorial;

global.tutorial = true;

global.enemy_database = ds_grid_create(35,11);
global.ending_database = ds_grid_create(1,16);


var h = 0;

while(h &lt; ds_grid_width(global.enemy_database)){
    ds_grid_set(global.enemy_database,h,0,false);
    ds_grid_set(global.enemy_database,h,1,"");
    h += 1;
}

h = 0;

while(h &lt; ds_grid_height(global.ending_database)){
    ds_grid_set(global.ending_database,0,h,false);
    h += 1;
}

is_bright = true;
b_alpha = 0.1;

Create_Beastiary_Library();

//Hold the general purpouse control variables here
globalvar touch_button;
globalvar release_button;

global.touch_button = mouse_check_button_pressed(mb_left);;
global.release_button = mouse_check_button_released(mb_left);



//Options variables
globalvar show_floor;
globalvar show_text;
globalvar volume;
globalvar animate;
globalvar damage_display;
globalvar level_display;
globalvar ads;
globalvar high_score;

global.high_score = 0;
global.ads = false;
global.damage_display = 3;
global.level_display = 3;

global.show_floor = true;
global.show_text = true;
global.volume = 1;
global.animate = true;

globalvar p_map;
global.p_map = ds_map_create();


//Endless Result Grid
globalvar endless_grid;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
//Initialize in app purchases

no_ads_map = ds_map_create();

ds_map_add(no_ads_map,"id","pd_remove_ads");
ds_map_add(no_ads_map,"title","Remove Ads");
ds_map_add(no_ads_map,"description","Removes all Ads from the game.");
ds_map_add(no_ads_map,"price","$1.99");

purchase_list = ds_list_create();

ds_list_add(purchase_list,no_ads_map);

iap_activate(purchase_list);

ds_map_destroy(no_ads_map);
ds_list_destroy(purchase_list);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
if(os_type == os_android or os_type == os_ios){
   // GoogleMobileAds_Init("ca-app-pub-6419718899926547/9305752119");
    global.ads = false;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Magical Interpolation by tizzio on the GMC

//disable automatic application surface draw
application_surface_draw_enable(false);

//display size
screen_w = display_get_width();
screen_h = display_get_height();

//actual application surface size
app_w = view_wview[0]
app_h = view_hview[0]


//rounded scalint for pixel perfect
app_xscal = ceil(screen_w / app_w);
app_yscal = ceil(screen_h / app_h);

//up-scaled surface 
screen_sur = surface_create(app_w * app_xscal, app_h * app_yscal);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
//Handle Save data here

//Create the data for the first time
if(!file_exists("p_save.ini")){
    ini_open("p_save.ini");
    
    save = ds_map_create();
    
    //Save File Structure
    //
    //Keys  1 - 35 : Status of the Monster Database
    //Keys 36 - 51 : Status of the Ending Database
    //Key    52    : Current High Score
    //Key  pd_ads  : Status of Ads
    //Key    54    : Show Floor Option
    //Key    55    : Show Text Option
    //Key    56    : Animate Option
    //Key    57    : Damage Display Option
    //Key    58    : Level Display Option
    //Key    59    : Volume
    
    
    var m = 1;
    while(m &lt;= 52){
        ds_map_add(save,m,0);
        m+=1;
    }
    ds_map_add(save,"pd_ads",1);
    m = 54;
    while(m &lt;= 56){
        ds_map_add(save,m,1);
        m+=1;
    }
    ds_map_add(save,57,3);
    ds_map_add(save,58,3);
    ds_map_add(save,59,1);
    ds_map_add(save,"tutorial",1);
    
    ds_map_secure_save(save,"p_save.ini");
    
    ds_map_destroy(save);
    
    audio_master_gain(0.5);
    
    ini_close();
}


//Load the data from the ini file into the global variables
else{
    ini_open("p_save.ini");
     
     save = ds_map_secure_load("p_save.ini");
    
    
    
    //Load Settings
    global.show_floor = ds_map_find_value(save,string(54));
    global.show_text = ds_map_find_value(save,string(55));
    global.animate = ds_map_find_value(save,string(56));
    global.damage_display = ds_map_find_value(save,string(57));
    global.level_display = ds_map_find_value(save,string(58));
    global.volume = ds_map_find_value(save,string(59));
    
    global.tutorial = ds_map_find_value(save,"tutorial");
    
    audio_master_gain((global.volume/2.0));
    
    //Load Enemy Database
    var e = 0;
    while(e &lt; 35){
        ds_grid_set(global.enemy_database,e,0,(ds_map_find_value(save,string(e+1))));
        e += 1;
    }
    
    //Load Ending Database
    var e = 0;
    var se = 36;
    while(e &lt; 16){
        ds_grid_set(global.ending_database,0,e,(ds_map_find_value(save,string(se))));
        se += 1;
        e += 1;
    }
    
    //Load High Score
    global.high_score = ds_map_find_value(save,string(52));
    
    //Load Ad Status
    global.ads = ds_map_find_value(save,"pd_ads");
    
    
    if(os_type == os_ios or os_type == os_android){
    //Check the store if it's available to confirm ad status
    if(iap_status() == iap_status_available){
        store_checked = true;
        var store_contents = ds_map_create();
        var purchase_id = ds_map_find_value(global.p_map, "index");
        iap_purchase_details(purchase_id,store_contents);
        var p_status = ds_map_find_value(store_contents,"status");
        //If the app is purchases, remove ads
        if(p_status == iap_purchased){
            global.ads = 0;
        }
        //If the app is failed, canceled, or refunded, set ads
        if(p_status == iap_failed or p_status == iap_canceled or p_status == iap_refunded){
            global.ads = 1;
        }
    }
    }
    
    else{
        store_checked = true;
    }
    
    
    
    ds_map_destroy(save);
    
    ini_close();

}

    global.ads = false;
 


global.ads = 1;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
if(os_type == os_ios or os_type == os_android){
    facebook_init();
    //var permissions = ds_list_create();
    //facebook_login(permissions,fb_login_default);
    //ds_list_destroy(permissions);
    //facebook_request_publish_permissions("publish_actions");
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>Check_Store</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
global.touch_button = mouse_check_button_pressed(mb_left);
global.release_button = mouse_check_button_released(mb_left);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
if(mouse_y &lt; y+50 and mouse_x &lt; x + 120 and mouse_check_button_pressed(mb_left)){
    pressed = 1;
}
if(pressed and mouse_check_button_released(mb_left)){
    pressed = 0;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scaleprevious=scale
///Picking Scales and Fullscreen Toggle
if keyboard_check_pressed(ord("0"))
{
/////Toggle Fullscreen
    if window_get_fullscreen()
    {
        window_set_fullscreen(false)
        window_set_size(view_wview*scale,view_hview*scale)
        }
        else
        {
         window_set_fullscreen(true)
     }
      window_set_size(view_wview*scale,view_hview*scale)
}
//New Smart-Interpolation by Tizzy
if (custom_fullscreen == true)
{
window_set_fullscreen(true)
global.interpolation=true
}
else{
window_set_fullscreen(false)
global.interpolation=false
}
////Scales 1 through 5 below
if keyboard_check_pressed(ord("1"))
{
scale=1;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}
}

if keyboard_check_pressed(ord("2"))
{
scale=2;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}
}

if keyboard_check_pressed(ord("3"))
{
scale=3;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}
}

if keyboard_check_pressed(ord("4"))
{
scale=4;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}
}

if keyboard_check_pressed(ord("5"))
{
scale=5;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}
}

if keyboard_check_pressed(ord("6"))
{
scale=6;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}
}
if scale!=scaleprevious
{
window_set_size(view_wview*scale,view_hview*scale)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
//Handle ads here
if(global.ads){
   if(GoogleMobileAds_InterstitialStatus() == "Ready"){GoogleMobileAds_ShowInterstitial();}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
if(pressed and instance_exists(Stat_Screen)){
    if(mouse_y &gt; y+30){
        if(mouse_x &lt; x+120){
            if(Stat_Screen.active == false and Stat_Screen.moving == false and Text_Box.display_log == false and Dungeon.init == false){
                Stat_Screen.activated = true;    
                pressed = 0;
            } 
        }    
    }
}
else{
pressed = 0;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
//Every time the iap event is triggered, load the iap data map into our global map
ds_map_clear(global.p_map);

ds_map_copy(global.p_map,iap_data);


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
if(surface_exists(screen_sur)){
    surface_free(screen_sur);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Disable the Application Surface
application_surface_draw_enable(false);
surface_resize(application_surface,view_wview,view_hview)

///set initial scale
scale = 2;
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}

///New Smart-Interpolation Feature
global.interpolation=false
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Magical Interpolation by tizzio on the GMC

//disable automatic application surface draw
application_surface_draw_enable(false);

//display size
screen_w = display_get_width();
screen_h = display_get_height();

//actual application surface size
app_w = view_wview[0]
app_h = view_hview[0]

//rounded scalint for pixel perfect
app_xscal = ceil(screen_w / app_w);
app_yscal = ceil(screen_h / app_h);

//up-scaled surface 
screen_sur = surface_create(app_w * app_xscal, app_h * app_yscal);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{



}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////This is the important part here. This uses the new application_surface!
if(custom_fullscreen == false){
draw_surface_ext(application_surface,(window_get_width()/2)-((view_wview*scale)/2),(window_get_height()/2)-((view_hview*scale)/2) ,scale,scale,0,c_white,1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Magical Interpolation by tizzio on the GMC

//turn off texture interpolation
texture_set_interpolation(false);

if global.interpolation=true
{
if window_get_fullscreen()
    {
    //display size
    screen_w = display_get_width();
    screen_h = display_get_height();
    }
        else
        {
        //display size
        screen_w = window_get_width();
        screen_h = window_get_height();
        }
  
//recreate the surface if not exists
if(!surface_exists(screen_sur))
    screen_sur = surface_create(app_w * app_xscal, app_h * app_yscal);


//render on the upscaled surface
surface_set_target(screen_sur);
draw_surface_ext(application_surface, 0, 0, app_xscal, app_yscal, 0, -1, 1);
surface_reset_target();

//draw the big surface stretched fit the screen
texture_set_interpolation(true);
draw_surface_stretched(screen_sur, 0, 0, screen_w, screen_h);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
if(is_bright == true){
    //draw_sprite_ext(brightness_spr,0,0,0,1,1,0,c_white,b_alpha);
}



}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="109">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
display_set_gui_size(global.gui_width+40,global.gui_height+30);
view_wview[0] += 40;
view_hview[0] += 30;
global.gui_width += 40;
global.gui_height += 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="107">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
display_set_gui_size(global.gui_width-40,global.gui_height-30);
view_wview[0] -= 40;
view_hview[0] -= 30;
global.gui_width -= 40;
global.gui_height -= 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="84">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
room_goto(Title_Screen);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
audio_master_gain(global.volume);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
room_goto(Options);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
