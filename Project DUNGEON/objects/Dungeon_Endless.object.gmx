<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Dungeon</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
//The dungeon object holds the data for the current dungeon, including room layout, boss data, and loot
game_over = false;
//Init flag will set the dungeon to be initialized next step, after parameters are determined
init = true;
trap_animate = false;
segment = 0;
draw_test = false;
draw_test_y = 0;
boss_death_timer = 0;
color = c_white;
enemy_level = 0;
last_was_trap = false;
chests_opened = 0;
slime_prayed = false;
prayed = false;
done_ani = false;
shop_ball_timer = 0;
has_scouter = false;
enemy_shield = false;
eye_alpha = 0.85;
has_sash = true;
in_prayer = false;
prayer_timer = 0;
prayed = false;
prayer_type = 0;
spec_enter = false;
spec_alpha = 1.0;
holy_blessing = 0;
music_playing = false;
boss_beat = false;
width = 1;
level_list = ds_list_create();
tran_timer = 0;
//Parameters
randomize();
spec_x = 128;
spec_y = 10;
spec_scale = 1;
//Width of the dungeon grid
//Length of the dungeon grid
length = 21;
//Block size of difficulty spikes
interval = 1;
//Generation probability variables;
monster_chance_standard = 50;
bomb_chance_standard = 10;
slot_chance_standard = 10;
shop_chance_standard = 10;
heal_chance_standard = 5;
chest_chance_standard = 15;

hermit_timer = 0;

monster_chance_treasury = 0;
chest_chance_treasury = 55;
heal_chance_treasury = 5;
shop_chance_treasury = 10;
bomb_chance_treasury = 5;
slot_chance_treasury = 25;

hermit_index = 0;

monster_chance_chaos = 40;
chest_chance_chaos = 10;
heal_chance_chaos = 5;
shop_chance_chaos = 25;
bomb_chance_chaos = 10;
slot_chance_chaos = 10;


special_timer = 0;
//Current battle state of the dungeon. If set, in the middle of battle. If not set, transitioning to next room
battling = false;
heal_timer = -1;
//Current phase of any battling
battle_phase = "choose";
player_dead = false;
in_trap = false;
in_shop = false;
in_chest = false;
chest_opened = false;
animate_chest = false;
timer = 0;
chest_stat = 0;
chest_value = 0;
is_mimic = false;
current_trap_spr = basic_trap_spr;
chest_index = 0;
//Use two lists to keep track of game history
foe_history = ds_list_create();
result_history = ds_list_create();


in_slot = false;
boss_theme = boss_song;


//Bomb event variables
in_bomb = false;
animate_bomb = false;
bomb_index = 0;
bomb_level = 0;
bomb_timer = 0;
bomb_strikes = 0;
bomb_code[0] = 0;
bomb_code[1] = 0;
bomb_code[2] = 0;
bomb_code[3] = 0;
bomb_wait = false;
bomb_entered[0] = false;
bomb_entered[1] = false;
bomb_entered[2] = false;
bomb_entered[3] = false;


heal_draw_y = 10;
heal_draw_index = 0;
heal_draw_alpha = 1.0;

has_standard = true;
theme_music = dungeon_theme;

//theme_music = boss_song;

//Difficulty Curve
//
// 1 - Easy: Will spawn enemies in current tier and one below
// 
// 2 - Normal : Only Spawn enemies in current tier
// 
// 3 - Hard : Spawn enemies in current tier and one above
//
// Tier is determined by current location
//
// 1-3 : Tier 1
// 4-6 : Tier 2
// 7-9 : Tier 3
// ...
// 28-29 : Tier 9


//if(!audio_is_playing(theme_music)){
  //  audio_sound_gain(theme_music,global.volume,0);
  //  audio_play_sound(theme_music,1,true);
  //  audio_master_gain(global.volume);
//}


//Shop Variables
//
//Type - Determines the action taken by shop
// ex. reverse - Switch the values in the two shop stat variables
//     absorb  - Depending on player action, take all points in one stat and put them into the other
shop_type = "";
shop_stat_1 = "";
shop_stat_2 = "";
absorb_dir = 0;
animate_shop = false;

s1x = -4;
s1y = 12;
s2x = 56;
s2y = 12;

//Battler variables
//Holds the objects in combat
player_1 = 0;
player_2 = 0;

timer = 0;

//Trap Variables
trap_type = "";
trap_level = 0;


//Test
player_1 = instance_create(0,0,Unit);

player_1.name = "The Player";

//assign the correct class

if(global.player_class == "Knight"){
    player_1.sprite_index = knight_spr;
    player_1.special_script = Holy_Blessing;
    player_1.meter_max = 10;
    player_1.MAX_HP = 20;
    player_1.HP = 20;
    player_1.strength = 10;
    player_1.magic = 0;
    player_1.defense = 13;
    player_1.res = 12;
    player_1.luck = 4;    
    player_1.attack_type = "physical";
}
else if(global.player_class == "Mage"){
    player_1.sprite_index = wizard_spr;
    player_1.special_script = MageFlame;
    player_1.MAX_HP = 20;
    player_1.HP = 20;
    player_1.strength = 0;
    player_1.magic = 12;
    player_1.defense = 10;
    player_1.res = 14;
    player_1.luck = 8;    
    player_1.attack_type = "magic";
}
else if(global.player_class == "Rogue"){
    player_1.sprite_index = rogue_spr;
    player_1.special_script = Shadow_Step;
    player_1.MAX_HP = 20;
    player_1.HP = 20;
    player_1.strength = 14;
    player_1.magic = 10;
    player_1.defense = 10;
    player_1.res = 8;
    player_1.luck = 10;    
    player_1.attack_type = "physical";
}
else if(global.player_class == "Monk"){
    player_1.sprite_index = monk_spr_p;
    player_1.special_script = Spirit_Shift;
    player_1.meter_max = 3;
    player_1.MAX_HP = 20;
    player_1.HP = 20;
    player_1.strength = 12;
    player_1.magic = 12;
    player_1.defense = 10;
    player_1.res = 10;
    player_1.luck = 10;    
    player_1.attack_type = "physical";
}




if(player_1.attack_type == "physical"){var noff = player_1.strength;}
else{var noff = player_1.magic;}

var ndef = player_1.defense;
var nres = player_1.res;
var tdeff = round((ndef+nres)/2);

player_1.level = round((noff+tdeff)/2);


map = ds_grid_create(1,length);

    

//Location of player
current_x = 0;
current_y = 0;


//Create the results grid
global.endless_grid = ds_grid_create(2,20);

var nx = 0;
var ny = 0;

while(ny &lt; 20){
    while(nx &lt; 2){
        ds_grid_set(global.endless_grid,nx,ny,0);
        nx += 1;
    }
    ny += 1;
    nx = 0;
}



}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{

if(animate_shop == true){
    
    if(done_ani == false){
    
    if(timer == 0){
        hermit_timer += 1;
        if(shop_type == "reverse"){
            s1x += 4;
            s2x -= 4;
            if(spec_x + s2x &lt;= spec_x-4){timer = 1;}    
        }
        else if(shop_type == "absorb"){
            if(absorb_dir == 1){
                s2x -= 4;
                if(hermit_timer == 3){
                    hermit_index = 3;
                }
                else if(hermit_timer == 6){
                    hermit_index = 4;
                }
                if(spec_x + s2x &lt;= spec_x-2){s2x = 30000;timer = 1;}
            }
            else if(absorb_dir == 2){
                s1x += 4;
                if(hermit_timer == 3){
                    hermit_index = 1;
                }
                else if(hermit_timer == 6){
                    hermit_index = 2;
                }
                if(spec_x + s1x &gt;= spec_x + 58){s1x = 30000;timer = 1;hermit_timer = 0;}
            }    
        }   
    }
    
    else{
        if(shop_type == "reverse"){
            timer += 1;
            if(timer == 5){done_ani = true;}    
        }
        else if(shop_type == "absorb"){
            timer += 1;
            if(timer == 5){done_ani = true;}
        }        
    }
    
    }
    
    
    if(done_ani == true){
    
    spec_alpha -= 0.05;
    
    if(spec_alpha &lt; 0){
    
    
    
    animate_shop = false;
    in_shop = false;
    current_y += 1;
    timer = 0;
    s1y = 12;
    s2y = 12;
    s1x = -4;
    s2x = 56;
    
    //Apply the shop effect
    if(shop_type == "reverse"){
        if((shop_stat_1 == "STR" and shop_stat_2 == "MAG") or (shop_stat_1 == "MAG" and shop_stat_2 == "STR")){
            var swap = player_1.strength;
            player_1.strength = player_1.magic;
            player_1.magic = swap;
        }
        else if((shop_stat_1 == "STR" and shop_stat_2 == "DEF") or (shop_stat_1 == "DEF" and shop_stat_2 == "STR")){
            var swap = player_1.strength;
            player_1.strength = player_1.defense;
            player_1.defense = swap;
        }
        else if((shop_stat_1 == "STR" and shop_stat_2 == "RES") or (shop_stat_1 == "RES" and shop_stat_2 == "STR")){
            var swap = player_1.strength;
            player_1.strength = player_1.res;
            player_1.res = swap;
        }
        else if((shop_stat_1 == "STR" and shop_stat_2 == "LCK") or (shop_stat_1 == "LCK" and shop_stat_2 == "STR")){
            var swap = player_1.strength;
            player_1.strength = player_1.luck;
            player_1.luck = swap;
        }
        else if((shop_stat_1 == "MAG" and shop_stat_2 == "DEF") or (shop_stat_1 == "DEF" and shop_stat_2 == "MAG")){
            var swap = player_1.magic;
            player_1.magic = player_1.defense;
            player_1.defense = swap;
        }
        else if((shop_stat_1 == "MAG" and shop_stat_2 == "RES") or (shop_stat_1 == "RES" and shop_stat_2 == "MAG")){
            var swap = player_1.magic;
            player_1.magic = player_1.res;
            player_1.res = swap;
        }
        else if((shop_stat_1 == "MAG" and shop_stat_2 == "LCK") or (shop_stat_1 == "LCK" and shop_stat_2 == "MAG")){
            var swap = player_1.magic;
            player_1.magic = player_1.luck;
            player_1.luck = swap;
        }
        else if((shop_stat_1 == "DEF" and shop_stat_2 == "RES") or (shop_stat_1 == "RES" and shop_stat_2 == "DEF")){
            var swap = player_1.defense;
            player_1.defense = player_1.res;
            player_1.res = swap;
        }
        else if((shop_stat_1 == "DEF" and shop_stat_2 == "LCK") or (shop_stat_1 == "LCK" and shop_stat_2 == "DEF")){
            var swap = player_1.defense;
            player_1.defense = player_1.luck;
            player_1.luck = swap;
        }
        else if((shop_stat_1 == "RES" and shop_stat_2 == "LCK") or (shop_stat_1 == "LCK" and shop_stat_2 == "RES")){
            var swap = player_1.res;
            player_1.res = player_1.luck;
            player_1.luck = swap;
        }  
        //Send Message to Text Box
        Text_Box.new_text = (shop_stat_1 + " and " + shop_stat_2 + " reversed!");
        Update_Text();          
    }
    
    else if(shop_type == "absorb"){
        if(absorb_dir == 1){
            if(shop_stat_2 == "STR")     {var absorbed = player_1.strength;player_1.strength = 0;}
            else if(shop_stat_2 == "MAG"){var absorbed = player_1.magic;player_1.magic = 0;}
            else if(shop_stat_2 == "DEF"){var absorbed = player_1.defense;player_1.defense = 0;}
            else                         {var absorbed = player_1.res;player_1.res = 0;}
            
            absorbed = ceil(absorbed/4);
            
            if(shop_stat_1 = "STR")     {player_1.strength += absorbed;}
            else if(shop_stat_1 = "MAG"){player_1.magic += absorbed;}
            else if(shop_stat_1 = "DEF"){player_1.defense += absorbed;}
            else                        {player_1.res += absorbed;}
            
            Text_Box.new_text = (shop_stat_2 + " absorbed into " + shop_stat_1 + "!");
            Update_Text();
        }
        
        else if(absorb_dir == 2){
            if(shop_stat_1 == "STR")     {var absorbed = player_1.strength;player_1.strength = 0;}
            else if(shop_stat_1 == "MAG"){var absorbed = player_1.magic;player_1.magic = 0;}
            else if(shop_stat_1 == "DEF"){var absorbed = player_1.defense;player_1.defense = 0;}
            else                         {var absorbed = player_1.res;player_1.res = 0;}
            
            absorbed = ceil(absorbed/4);
            
            if(shop_stat_2 = "STR")     {player_1.strength += absorbed;}
            else if(shop_stat_2 = "MAG"){player_1.magic += absorbed;}
            else if(shop_stat_2 = "DEF"){player_1.defense += absorbed;}
            else                        {player_1.res += absorbed;}
            
            Text_Box.new_text = (shop_stat_1 + " absorbed into " + shop_stat_2 + "!");
            Update_Text();
        }    
    }
    
    }
    
    
    }
    
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(spec_enter == true){
    spec_y += 7;
    if(spec_y == 10){
        spec_enter = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
if(in_shop == true and spec_enter == false and done_ani == false){
    shop_ball_timer += 1;
    if(shop_ball_timer == 1){
        s1y = 11;
        s2y = 11;
    }
    else if(shop_ball_timer == 2){
        s1y -= 1;
        s2y -= 1;
    }
    else if(shop_ball_timer == 3){
        s1y -= 1;
        s2y -= 1;
    }
    else if(shop_ball_timer == 5){
        s1y -= 1;
        s2y -= 1;
    }
    else if(shop_ball_timer == 7){
        s1y -= 1;
        s2y -= 1;
    }
    else if(shop_ball_timer == 10){
        s1y -= 1;
        s2y -= 1;
    }
    else if(shop_ball_timer == 13){
        s1y += 1;
        s2y += 1;
    }
    else if(shop_ball_timer == 15){
        s1y += 1;
        s2y += 1;
    }
    else if(shop_ball_timer == 17){
        s1y += 1;
        s2y += 1;
    }
    else if(shop_ball_timer == 18){
        s1y += 1;
        s2y += 1;
    }
    else if(shop_ball_timer == 19){
        s1y += 1;
        s2y += 1;
    }
    //////////////////////////////
    //Equilibrium
    else if(shop_ball_timer == 20){
        s1y += 1;
        s2y += 1;
    }
    //////////////////////////////
    else if(shop_ball_timer == 21){
        s1y += 1;
        s2y += 1;
    }
    else if(shop_ball_timer == 22){
        s1y += 1;
        s2y += 1;
    }
    else if(shop_ball_timer == 22){
        s1y += 1;
        s2y += 1;
    }
    else if(shop_ball_timer == 24){
        s1y += 1;
        s2y += 1;
    }
    else if(shop_ball_timer == 26){
        s1y -= 1;
        s2y -= 1;
    }
    else if(shop_ball_timer == 28){
        s1y -= 1;
        s2y -= 1;
    }
    else if(shop_ball_timer == 29){
        s1y -= 1;
        s2y -= 1;
    }
    else if(shop_ball_timer == 30){
        s1y -= 2;
        s2y -= 2;
        shop_ball_timer = 0;
    }
    
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Generate Dungeon</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{

//When the previous segment is beat, generate the next segment
if(init == true and endless_transition.visible == false){

    audio_stop_all();
    slime_prayed = false;
    
    with(Button){
        visible = true;
        if(transformed == true){
            transformed = false;
            image_index = 1;
        }
    }
    Text_Box.visible = true;
    
    //Add 20 empty slots to the results grid
    if(segment &gt; 0){
        append_grid();
    }
    
    Init_Classes();
    
    
    if(segment == 0){
        player_1.MAX_HP = 20;
        player_1.HP = 20;
    }
    else{
        player_1.HP += 10;
        if(player_1.HP &gt; player_1.MAX_HP){
            player_1.HP = player_1.MAX_HP;
        }
    }
    
    
    if(player_1.attack_type == "physical"){var noff = player_1.strength;}
    else{var noff = player_1.magic;}

    var ndef = player_1.defense;
    var nres = player_1.res;
    var tdeff = round((ndef+nres)/2);

    player_1.level = round((noff+tdeff)/2);
    
    
    if(segment &lt; 3){
        theme_music = dungeon_theme;
    }
    else if(segment &lt; 6){
        theme_music = straw_fields;
    }
    else if(segment &lt; 9){
        theme_music = dungeon_theme_2;
    }
    else{
        theme_music = dungeon_theme_chaos;
    }
    audio_play_sound(theme_music,1,true);
    audio_sound_gain(theme_music,global.volume,0);
    if(Dungeon.theme_music == dungeon_theme){
                audio_sound_gain(dungeon_theme,global.volume/2.5,0);
    }
    tran_timer = 0;
    //Clear the previous level list
    ds_list_destroy(level_list);
    //Create the next segment
    Endless_Generate();
    init = false;
    current_y = 0;
    current_x  = 0;
    
    ds_grid_set_region(map,0,0,30,30,0);
    
    
    //Copy the list over to the grid
    var g = 0;
    while(g &lt; ds_list_size(level_list)-1){
        var check_room = ds_list_find_value(level_list,g);
        if(check_room == 0){ds_grid_set(map,0,g,1);}
        else if(check_room &gt; 0){ds_grid_set(map,0,g,2);}
        else if(check_room == -1){ds_grid_set(map,0,g,4);}
        else if(check_room == -2){ds_grid_set(map,0,g,6);}
        else if(check_room == -3){ds_grid_set(map,0,g,7);}
        else if(check_room == -4){ds_grid_set(map,0,g,8);}
        else if(check_room == -5){ds_grid_set(map,0,g,10);}
        else if(check_room == -6){ds_grid_set(map,0,g,3);}
        g += 1;
    }
    //Set the last room to a boss room
    ds_grid_set(map,0,g,9);
    
    segment += 1;
    
    //Update transition indices
    if(segment == 2){
        endless_transition.bottom_index = 1;
        endless_transition.top_sky_index += 1;
    }
        
    else if(segment == 3){
        endless_transition.bottom_sky_index += 1;    
        endless_transition.top_sky_index += 1;  
    }
    else if(segment == 4){
        endless_transition.bottom_sky_index += 1;
    }
    else if(segment == 5){
        endless_transition.top_sky_index += 1;
    }
    
    else if(segment == 6){
        endless_transition.top_sky_index += 1;   
        endless_transition.bottom_sky_index += 1; 
    }
    else if(segment == 7){
        endless_transition.bottom_sky_index += 1;
    }
    else if(segment == 8){
        endless_transition.top_sky_index += 1;    
    }
    else if(segment == 9){
        endless_transition.bottom_sky_index += 1;
        endless_transition.top_sky_index += 1;    
    }
    else if(segment == 10){
        endless_transition.bottom_sky_index += 1;
    }
    else if(segment == 11){
        endless_transition.top_sky_index += 1;    
    }
    else if(segment == 12){
        endless_transition.top_sky_index += 1;    
        endless_transition.bottom_sky_index += 1;
    }
    else if(segment == 13){
        endless_transition.bottom_sky_index += 1;    
    }
    
    //Reset the Scouter setting every 3 floors
    if(((segment-1) mod 3) == 0){
        has_scouter = false;
    }
    
    //Set the Scouter Alpha
    if(segment == 1){
        eye_alpha = 0.85;
    }
    else if(segment == 2){
        eye_alpha = 0.55;
    }
    else if(segment == 3){
        eye_alpha = 0.25;
    }
    else if(((segment-1) mod 3) == 0){
        eye_alpha = 0.85;
    }    
    else if(((segment-2) mod 3) == 0){
        eye_alpha = 0.55;
    }
    else if(((segment-3) mod 3) == 0){
        eye_alpha = 0.25;
    }
    
}


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Heal Timer</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
if(heal_timer &gt;= 0){
    heal_timer += 1;
    if(heal_timer == 10){heal_draw_index = 1;}
    else if(heal_timer == 12){heal_draw_index = 2;}
    else if(heal_timer == 14){heal_draw_index = 3;}
    else if(heal_timer == 16){heal_draw_index = 4;}
    else if(heal_timer == 18){heal_draw_index = 5;}
    else if(heal_timer == 20){heal_draw_index = 6;}
    else if(heal_timer == 22){heal_draw_index = 7;}
    else if(heal_timer == 24){heal_draw_index = 8;}
    else if(heal_timer &gt; 24 and heal_draw_y &lt; 80){heal_draw_y += 5;}
    else if(heal_timer &gt; 24){
        heal_draw_alpha -= 0.05;
        if(heal_timer == 26){heal_draw_index = 7;}
        else if(heal_timer == 28){heal_draw_index = 6;}
        else if(heal_timer == 30){heal_draw_index = 5;}
    }
    if(heal_timer &gt;= 60){
        current_y += 1;
        heal_timer = -1;
        heal_draw_alpha = 1.0;
        heal_draw_index = 0;
        heal_draw_y = 10;
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check if Dungeon is Completed</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
//Check if the dungeon is completed
if(boss_beat == true){
    init = true;
    endless_transition.visible = true;
    with(Button){
        visible = false;
    }
    Text_Box.visible = false;
    audio_stop_all();
    endless_transition.done = false;
    endless_transition.done_2 = true;
    if(global.ads){
        GoogleMobileAds_LoadInterstitial();
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Move on to next room</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
//Once the battle is over, reset battle variales
if(game_over == false and battling == false and init == false and heal_timer == -1 and in_trap == false and in_shop == false and in_chest == false and in_bomb == false and in_slot == false and in_prayer == false){
    
    
    //Reset timer variables
    timer = 0;
    done_ani = false;
    spec_alpha = 1.0;
    spec_x = 128;
    hermit_index = 0;
    spec_y = -32;
    hermit_timer = 0;
    
    if(Dungeon.player_1.attack_type == "physical"){var noff = Dungeon.player_1.strength;}
    else{var noff = Dungeon.player_1.magic;}

    var ndef = Dungeon.player_1.defense;
    var nres = Dungeon.player_1.res;
    var tdeff = round((ndef+nres)/2);

    Dungeon.player_1.level = round((noff+tdeff)/2);
    
    
    //Decide what the next room holds
    var next_room = ds_grid_get(map,current_x,current_y);
    
    //Starting Room
    if(next_room == 1){
        Text_Box.new_text = "Start!";
        current_y += 1;
    }
       
    //Monster Room
    else if(next_room == 2){
        //Pick a monster 
        player_2 = instance_create(0,0,Unit);
        Endless_Choose_Monster();
        Choose_Index();
        
        
        //Give the monster a 5% chance of having a holy shield
        var check_shield = irandom_range(1,100);
        if(check_shield &lt;= 5){
            enemy_shield = true;
        }
        else{
            enemy_shield = false;
        }
        
        
        if(player_2.name == "Doppleganger"){
            player_2.level = player_1.level;
        }
    
        //Calculate Enemy Level
        //if(player_2.attack_type == "physical"){var o = player_2.strength;}
        //else{var o = player_2.magic;}
    
        //var d = player_2.defense / 2;
        //var r = player_2.res / 2;
    
        //var td = d + r;
    
        //player_2.level = round((o+td)/2);
        //player_2.enter = true;
        
        
        //Set enemy HP to correlate to location
        if(current_y &lt; 10){
            player_2.HP = 5;
            player_2.MAX_HP = 5;
        }
        else if(current_y &lt; 15){
            player_2.HP = 10;
            player_2.MAX_HP = 10;
        }
        else{
            player_2.HP = 15;
            player_2.MAX_HP = 15;
        }
        
    
        //Send message to text box
        Text_Box.new_text = player_2.name + " Appears!";
        battling = true;
        battle_phase = "wwww";
    
    }
    
    //Chest Room
    else if(next_room == 3){
        in_chest = true;
        spec_enter = true;
        spec_y = -32;
        animate_chest = false;
        is_mimic = false;
        chest_opened = false;
        
        
        //Send message to text box
        Text_Box.new_text = "Found a Chest!";
        battling = false;
        battle_phase = "choose";
        
    }
    
    //Heal room
    else if(next_room == 4){
        player_1.HP = player_1.MAX_HP;
        Text_Box.new_text = "Fully Healed!";
        heal_timer = 0;
    }
    
    
    //Shop room
    else if(next_room == 6){
        in_shop = true;
        spec_enter = true;
        shop_ball_timer = 0;
        spec_y = -32;
        if(next_room == 5){
            Text_Box.new_text = "Supposed to be a statue, but...";
            Update_Text();
        }
        //Decide the shop type and stats
        var randshop = irandom_range(1,2);
        var rands1   = irandom_range(1,4);
        var rands2   = irandom_range(1,4);
        
        //Determine type
        if(randshop == 1){shop_type = "reverse";Text_Box.new_text = "Rev. Hermit Encountered!";Update_Text();}
        else{shop_type = "absorb";Text_Box.new_text = "Abs. Hermit Encountered!";Update_Text();}
        
        //Determine first stat
        if     (rands1 == 1){shop_stat_1 = "STR";}
        else if(rands1 == 2){shop_stat_1 = "MAG";}
        else if(rands1 == 3){shop_stat_1 = "DEF";}
        else if(rands1 == 4){shop_stat_1 = "RES";}
        else if(rands1 == 5){shop_stat_1 = "LCK";}
        
        //Make sure the second stat is not the same as the first
        var different = false;
        while(different == false){
            if(rands2 == rands1){rands2 = irandom_range(1,4);}
            else{different = true;}
        }
        
        //Determine second stat
        if     (rands2 == 1){shop_stat_2 = "STR";}
        else if(rands2 == 2){shop_stat_2 = "MAG";}
        else if(rands2 == 3){shop_stat_2 = "DEF";}
        else if(rands2 == 4){shop_stat_2 = "RES";}
        else if(rands2 == 5){shop_stat_2 = "LCK";}
        
        
    }
    
    //Bomb Room
    else if(next_room == 7){
        in_bomb = true;
        spec_enter = true;
        spec_y = -32;
        //Bomb Data 
        //Level - Number of strikes allowed
        //timer - amount of time until failure ( 10 seconds at start )
        //strikes - amount of current strikes
        //code - 4 digit array containing defusing code
        
        Text_Box.new_text = "A Bomb has been Planted!";
        Update_Text();
        
        //Create the fuse effect
        instance_create(122,76,bomb_flame);
        
        bomb_level = irandom_range(2,2);
        bomb_timer = room_speed * 10;
        bomb_strikes = 0;
        bomb_wait = false;
        bomb_wait_timer = 0;
        bomb_code[0] = irandom_range(0,1);
        bomb_code[1] = irandom_range(0,1);
        bomb_code[2] = irandom_range(0,1);
        bomb_code[3] = irandom_range(0,1);
        bomb_index = 0;
        bomb_entered[0] = false;
        bomb_entered[1] = false;
        bomb_entered[2] = false;
        bomb_entered[3] = false;
        
    }
    
    //Slot Room
    else if(next_room == 8){
        in_slot = true;
        spec_enter = true;
        spec_y = -32;
        Text_Box.new_text = "A Slot Machine?";
        Update_Text();
        
        instance_create(128,10,slot_machine);
        
    }
    
    //Prayer Room
    else if(next_room == 10){
        in_prayer = true;
        spec_enter = true;
        spec_y = -32;
        prayer_type = irandom_range(0,2);
        if(prayer_type == 0){var temp_text = "Hermit Shrine";}
        else if(prayer_type == 1){var temp_text = "Bomb Shrine";}
        else{var temp_text = "Slime Shrine";}
        prayer_timer = 0;
        prayed = false;
        
        Text_Box.new_text = "A " + temp_text + " spotted!";
        Update_Text(); 
    }
    
    
    //Boss Room
    else if(next_room == 9){
    
        //Reset Endless Signs here
        endless_transition.sign_b = 39;
        endless_transition.sign_t = 39-192;
    
    
        var actual_level = irandom_range(boss_level,boss_level+9);
        boss_death_timer = 0;
        player_2 = instance_create(0,0,Unit);
        player_2.sprite_index = dark_lord_spr;
        player_2.name = "Dark Lord";
        player_2.HP = 20;
        player_2.MAX_HP = 20;
        player_2.defense = actual_level;
        player_2.res = actual_level;
        player_2.strength = actual_level;
        player_2.magic = actual_level;
        player_2.luck = 10;
        
        
        //Run chance for a magic type boss
        var is_magic = irandom_range(1,2);
        if(is_magic == 1){
            player_2.sprite_index = dark_lord_magic_spr;
            player_2.attack_type = "magic";
        }
        
        //Change music
        audio_stop_sound(theme_music);
        audio_sound_gain(boss_song,global.volume,0);
        theme_music = boss_song;
        audio_play_sound(theme_music,1,true);
           
        //Send message to text box
        Text_Box.new_text = "Dark Lord Encountered!";
        battling = true;
        battle_phase = "www";
            
        enemy_level = actual_level;
        Choose_Index();
        player_2.level = actual_level;
    }
    
    
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>Battle</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>Open_Chest</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>Flee_Special</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>Bomb</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>Prayer</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
if(endless_transition.visible == false){
if(!audio_is_playing(theme_music)){
    audio_sound_gain(theme_music,global.volume/2.0,0);
    audio_play_sound(theme_music,1,true);
    audio_master_gain(global.volume/2.0);
    if(Dungeon.theme_music == dungeon_theme){
                audio_sound_gain(dungeon_theme,global.volume/3.0,0);
    }
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
//Destroy all the Data Structures Here


ds_list_destroy(level_list);
ds_list_destroy(foe_history);
ds_list_destroy(result_history);

ds_grid_destroy(map);

//Stop the music
audio_stop_all();

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
if(draw_test == true){
draw_x = 0;
draw_y = 0;

    while(draw_y &lt; length){
        while(draw_x &lt; width){
            var value = ds_grid_get(map,draw_x,draw_y);
            draw_sprite(test_rooms_spr,value,draw_x*8,draw_y*8+draw_test_y);
            draw_x += 1;
        }
        draw_x = 0;
        draw_y += 1;    
    }

    //Draw Current location
    //draw_sprite(test_current_loc_spr,0,current_x*8,current_y*8);


}

else{

    //Draw background transition
    if(instance_exists(background_transition)){
        var spr = background_transition.sprite_index;
        var alp = background_transition.alpha;
        draw_sprite_ext(spr,0,0,0,1,1,0,c_white,alp);
    }

    //Draw Enemy
    if(battling == true){
        draw_sprite_ext(player_2.sprite_index,player_2.image_index,player_2.cur_x,player_2.cur_y,player_2.scale,player_2.scale,0,player_2.color,player_2.alpha);
    }
    
    
    //Draw Traps
    if(ds_grid_get(map,current_x,current_y) == 5){
    
        if(trap_animate == true){
            var inx = 1;
        }
        else{
            var inx = 0;
        }
    
        if     (trap_type == "STR"){draw_sprite_ext(current_trap_spr,inx,spec_x,spec_y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(trap_type == "MAG"){draw_sprite_ext(current_trap_spr,inx,spec_x,spec_y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(trap_type == "DEF"){draw_sprite_ext(current_trap_spr,inx,spec_x,spec_y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(trap_type == "RES"){draw_sprite_ext(current_trap_spr,inx,spec_x,spec_y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(trap_type == "LCK"){draw_sprite_ext(current_trap_spr,inx,spec_x,spec_y,spec_scale,spec_scale,0,c_white,spec_alpha);}
    }
    
    
    
    //Calculate the current percentage of the meter
    var total = player_1.meter_max*1.0;
    var current = player_1.meter*1.0;
    
    var ratio = current / total;
    
    if(ratio &lt; 0.1){var percent = 0;}
    else if(ratio &lt; 0.2){var percent = 1;}
    else if(ratio &lt; 0.3){var percent = 2;} 
    else if(ratio &lt; 0.4){var percent = 3;}
    else if(ratio &lt; 0.5){var percent = 4;}
    else if(ratio &lt; 0.6){var percent = 5;}
    else if(ratio &lt; 0.7){var percent = 6;} 
    else if(ratio &lt; 0.8){var percent = 7;}
    else if(ratio &lt; 0.9){var percent = 8;}
    else if(ratio &lt; 1.0){var percent = 9;}
    else{var percent = 10;}
    
    draw_set_font(hp_font);
    draw_sprite_ext(Special_Box.sprite_index,percent,120,134+Special_Box.selected,1,1,0,c_white,1.0);
    if(player_1.HP &gt; 9){draw_text_colour(135,141+Special_Box.selected,"HP:" + string(player_1.HP) + "/" + string(player_1.MAX_HP),c_white,c_white,c_white,c_white,1.0);}
    else{draw_text_colour(135,141+Special_Box.selected,"HP:" + " " + string(player_1.HP) + "/" + string(player_1.MAX_HP),c_white,c_white,c_white,c_white,1.0);}    
    draw_sprite_ext(player_1.sprite_index,player_1.image_index,player_1.cur_x,82,1,1,0,player_1.color,player_1.alpha);
    
    
    //Draw heal zone
    if(heal_timer &gt;= 0){
        draw_sprite_ext(heal_zone_spr,heal_draw_index,129,heal_draw_y,1,1,0,c_white,heal_draw_alpha);
    }
    
    //Write location
    if(global.show_floor == true){
        draw_text(2,2,("Floor:" + string(current_y + ((segment-1) * 20))));
    }
    
    //Calculate and write current player level
    
    if(global.level_display == 1 or global.level_display == 3){
        draw_text(2,12,"Lvl: " + string(player_1.level));
    }
    
    
    if(battling == true and (global.level_display == 2 or global.level_display == 3)){
        draw_text(2,22,"Enemy Lvl: " + string(player_2.level));
    }
    
    
    if(battling == true and player_2.enter == false and has_scouter){
            if(player_2.attack_type == "physical"){
                var offe = player_2.strength;
                var deffe = player_1.defense;
            }
            else{
                var offe = player_2.magic;
                var deffe = player_1.res;   
            }
            if(player_1.attack_type == "physical"){
                var offp = player_1.strength;
                var deffp = player_2.defense;
            }
            else{
                var offp = player_1.magic;
                var deffp = player_2.res;   
            }
            if(deffe &gt; offe + 35){var dame = 0;}
            else if(deffe &gt;= offe){var dame = 1;}
            else{var dame = 1+ offe - deffe;}
            
            if(deffp &gt;= offp){var damp = 1;}
            else{var damp = 1+offp - deffp;}
            
            
            draw_set_color(c_aqua);
            
            
            draw_text_colour(110,20,"- "+string(damp),c_aqua,c_aqua,c_aqua,c_aqua,eye_alpha);
            draw_text_colour(110,115,"- "+string(dame),c_aqua,c_aqua,c_aqua,c_aqua,eye_alpha);
            
    }
    
    
    
    
    
    //Draw Shop
    if(in_shop == true){
        if(shop_type == "reverse")    {draw_sprite_ext(reverse_wizard_spr,hermit_index,spec_x,spec_y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(shop_type == "absorb"){draw_sprite_ext(absorb_wizard_spr,hermit_index,spec_x,spec_y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        //Draw Stat Icons
        if     (shop_stat_1 == "STR"){draw_sprite_ext(shop_icon_spr,0,spec_x+s1x,spec_y+s1y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(shop_stat_1 == "MAG"){draw_sprite_ext(shop_icon_spr,1,spec_x+s1x,spec_y+s1y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(shop_stat_1 == "DEF"){draw_sprite_ext(shop_icon_spr,2,spec_x+s1x,spec_y+s1y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(shop_stat_1 == "RES"){draw_sprite_ext(shop_icon_spr,3,spec_x+s1x,spec_y+s1y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(shop_stat_1 == "LCK"){draw_sprite_ext(shop_icon_spr,4,spec_x+s1x,spec_y+s1y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        
        if     (shop_stat_2 == "STR"){draw_sprite_ext(shop_icon_spr,0,spec_x+s2x,spec_y+s2y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(shop_stat_2 == "MAG"){draw_sprite_ext(shop_icon_spr,1,spec_x+s2x,spec_y+s2y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(shop_stat_2 == "DEF"){draw_sprite_ext(shop_icon_spr,2,spec_x+s2x,spec_y+s2y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(shop_stat_2 == "RES"){draw_sprite_ext(shop_icon_spr,3,spec_x+s2x,spec_y+s2y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        else if(shop_stat_2 == "LCK"){draw_sprite_ext(shop_icon_spr,4,spec_x+s2x,spec_y+s2y,spec_scale,spec_scale,0,c_white,spec_alpha);}
        
    }
    
    //Draw Chest
    if(in_chest == true){
        draw_sprite_ext(chest_1_spr,chest_index,spec_x,spec_y,spec_scale,spec_scale,0,c_white,spec_alpha);
    }
    
    if(has_sash){
        draw_sprite(item_con,0,80,130);
    }
    if(battling == true and enemy_shield == true and player_2.enter == false){
        draw_sprite(item_con,0,80,10);   
    }
    
    //Draw Prayer Statue
    if(in_prayer == true){
        draw_sprite_ext(prayer_statue_spr,prayer_type,spec_x,spec_y,spec_scale,spec_scale,0,c_white,spec_alpha);
    }
    
    //Draw Bomb
    if(in_bomb == true){
        //draw_text(150,80,string(bomb_strikes)+" / " + string(bomb_level+1));
        //draw_text(128,80,string(bomb_timer));
        draw_sprite_ext(bomb_spr,bomb_index,spec_x,spec_y,1,1,0,c_white,spec_alpha);
        
        if(bomb_index &lt; 10){
        
        if(bomb_wait == true){
            draw_sprite_ext(bomb_mark_spr,1,spec_x+22,spec_y+45,1,1,0,c_white,spec_alpha);
            draw_sprite_ext(bomb_mark_spr,1,spec_x+30,spec_y+45,1,1,0,c_white,spec_alpha);
            draw_sprite_ext(bomb_mark_spr,1,spec_x+38,spec_y+45,1,1,0,c_white,spec_alpha);
            draw_sprite_ext(bomb_mark_spr,1,spec_x+46,spec_y+45,1,1,0,c_white,spec_alpha);
        }
        
        else{
            var dbi = 0;
            while(dbi &lt; 4){
                if(bomb_entered[dbi] == true){draw_sprite_ext(bomb_mark_spr,0,spec_x+22+(8*dbi),spec_y+45,1,1,0,c_white,spec_alpha)}
                dbi += 1;
            }
        }
        
        }    
    }
    
    
    //Draw Transition
    //if(init == true){
      //  draw_set_font(test_font);
       // draw_rectangle_colour(0,0,room_width,room_height,c_black,c_black,c_black,c_black,false);
       // draw_text(10,100,"Advancing to Segment " + string(segment+1));
    //}
    
}






}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
